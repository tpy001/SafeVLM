import json

def set_seed(seed): 
    import random
    random.seed(seed)
    import numpy as np
    np.random.seed(seed)
    import torch
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    # torch.backends.cudnn.deterministic = True
    #torch.backends.cudnn.benchmark = False


def debug():
    import debugpy
    print("Waiting for debugger...")
    debugpy.listen(5678)
    debugpy.wait_for_client()


def save_jailbreak_response(responses,data, safe = [],image_path = [],output_file_path="./response.json"):
    """
    Save jailbreak evaluation results to a JSON file.

    This function formats the given model responses and associated metadata 
    (such as question, answer, category, and safety flag) into a structured list of 
    dictionaries and saves it to a JSON file.

    Args:
        responses (List[str]): A list of responses generated by the model.
        data (Dict[str, List[str]]): A dictionary containing the corresponding input data.
            Must include 'question' or 'ori_question'. Optionally includes 'answer' and 'category'.
        safe (List[bool or int], optional): A list indicating whether each response is safe.
            If not provided, each entry is set to -1. Defaults to empty list.
        output_file_path (str, optional): File path where the JSON output will be saved. 
            Defaults to './response.json'.

    Output Format (per item in list):
        {
            "id": int,
            "question": str,
            "response": str,
            "answer": str or 'None',
            "category": str or 'None',
            "safe": bool or int
        }
    """
    res = []
    index  = 0

    if 'ori_question' in data.keys():
        text = data['ori_question']
        rephrased_text = data['question']
    else:
        text = data['question']
        rephrased_text = data['question']

    answer = None
    category =  None
    if 'answer' in data.keys():
        answer = data['answer']
    if 'category' in data.keys():
        category = data['category']

    for i in range(len(responses)):
        conv = {
            "id": index,
            "question": text[i],
            "rephrased_question": rephrased_text[i],
            "response": responses[i],
            "answer": answer[i] if answer is not None else 'None',
            "category": category[i] if category is not None else 'None',
            "safe": safe[i] if len(safe) > 0 else -1,
            "image_path": image_path[i] if len(image_path) > 0 else 'None'
        }
        res.append(conv)
        index += 1

    with open(output_file_path, 'w', encoding='utf-8') as f:
        json.dump(res, f, ensure_ascii=False, indent=4)